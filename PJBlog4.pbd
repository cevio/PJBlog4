SPK 00000296 00 a|config.asp>4944|default.asp>6190|plugin.asp>3038|assets\css\page-comment.css>2386|assets\js\page-comment.js>9932|assets\js\page-writeArticle.js>5528|assets\js\core\overlay.js>4310|server\comment.asp>4395|server\configure.asp>4207|server\web\page-comment.asp>7247|server\web\page-index.asp>4324| <!--#include file="server/core/obay.asp" -->
<!--#include file="profile/handler/config.asp" -->
<%
/* 
 * version V4.0 ( 2012-08-10 )
 * http://sizzle.cc http://pjhome.net
 * 全局设置
 * 可以通过这里的设置对全局网站有关功能开启和关闭以及数据库路径的修改。
 * 具体参见各项说明。
 */
	config.debug = true; // 是否开启DEBUG模式
	config.useApp = true; // 是否使用APP
	config.cacheAccess = "profile/caches"; // 缓存文件夹名
	config.platform = "http://platform.pjhome.net";
	config.version = "4.0.0.366";
	
/*
 * 网站模块映射
 * 调用模块时候注意模块返回变量。
 * 在调用前请先确定模块的稳定性和存在性。
 * 建议使用官方推荐模块
 */
 
 	// 通用模块映射
 	map["DBO"] = "server/core/dbo";
	map["FSO"] = "server/core/fso";
	map["STREAM"] = "server/core/stream";
	map["XML"] = "server/core/xml";
	map["XMLHTTP"] = "server/core/xmlhttp";
	map["WINHTTP"] = "server/core/winhttp";
	map["UPLOAD"] = "server/core/upload";
	map["COOKIE"] = "server/core/cookie";
	map["DATE"] = "server/core/date";
	map["MD5"] = "server/core/md5";
	map["SHA1"] = "server/core/sha1";
	map["PACKAGE"] = "server/core/package";
	map["SPKPACKAGE"] = "server/core/spkPackage";
	map["SQL"] = "server/core/sql";
	
	// 逻辑模块映射
	map["fn"] = "server/fn";
	map["gra"] = "server/gravatar";
	map["openDataBase"] = "server/dataBaseOperation";
	map["cache"] = "server/cache";
	map["icon"] = "server/getIcons";
	map["tags"] = "server/tags";
	map["xmltable"] = "server/xmltable";
	map["pluginCustom"] = "server/pluginCustom";
	map["sap"] = "server/SystemActionProxy";
	map["member"] = "server/member";
	map["article"] = "server/article";
	map["comment"] = "server/comment";
	map["guestbook"] = "server/guestbook";
	map["theme"] = "server/theme";
	map["plugin"] = "server/plugin";
	map["status"] = "server/status";
	
	// handler处理模块映射
	map["cacheHandle"] = "profile/handler/cache";
	
	// 缓存模块
	map["cache_global"] = "server/module/global";
	map["cache_category"] = "server/module/category";
	map["cache_article"] = "server/module/article";
	map["cache_article_detail"] = "server/module/article-detail";
	map["cache_comment"] = "server/module/comment";
	
	http.service = function( callback, isposter ){
		http.async(function(req){
			try{
				require("status")();
				var j = req.query.j, callbacks = {};
				if ( config.user.admin === true || ( (isposter === true) && (config.user.poster === true) ) ){
					var dbo = require("DBO"),
						connecte = require("openDataBase"),
						sap = require("sap");
								
					if ( connecte === true ){
						callback.call(callbacks, req, dbo, sap);
						if ( callbacks[j] !== undefined ){
							return callbacks[j]();
						}else{
							return {
								success: false,
								error: "未找到对应处理模块"
							}
						}
					}else{
						return {
							success: false,
							error: "数据库连接失败"
						}
					}
				}else{
					return {
						success: false,
						error: "非法权限操作"
					}
				}
			}catch(e){
				return {
					success: false,
					error: e.message
				}
			}
		});
		CloseConnect();
	}
	
/*
 * 系统默认变量
 * 不允许修改和赋值
 * 改动可能引起系统异常
 */
 	config.conn = null;
	config.user = {
		login: false,
		id: 0
	}
	
	config.page = { assets: {}, server: {} };
 
/*
 * 全局ASA文件加载
 * 如果修改过以上的config.appName属性，请删除网站根目录的global.asa文件
 * 之后系统将自动创建该文件
 */
 	asa();

/*
 * 数据库关闭
 * 尝试关闭数据库方法。一般写在系统结束末尾。
 * 请谨慎使用此方法。
 */	
	function CloseConnect(){
		try{
			config.conn.Close();
			config.conn = null;
		}catch(error){
			console.push(error.message);
		}
	}
	
	function ConsoleClose( word ){
		CloseConnect();
		console.end(word);
	}
	
	function ConsoleDisAble( word ){
		CloseConnect();
		console.log(word);
	}

/*
 * 数据源缓存
 * 打开某一数据源，通过缓存
 * 适用于模板制作。
 */
 	function LoadCacheModule( ModuleName, ModuleCallback ){
		var ModuleCacheDatas = require(ModuleName);
		if ( typeof ModuleCallback === "function" ){
			ModuleCallback( ModuleCacheDatas );
		}
	}
	
	function LoadPluginsCacheModule( ModuleName, ModuleCallback ){
		if ( config.pluginModen === undefined ){
			config.pluginModen = require("pluginCustom");
		}
		var ModuleCacheDatas = config.pluginModen.loadPlugin( ModuleName );
		if ( ModuleCacheDatas !== null ){
			if ( typeof ModuleCallback === "function" ){
				ModuleCallback( ModuleCacheDatas );
			}else{
				return ModuleCacheDatas;
			}
		}
	}
	
	var pageCustomParams = {
		tempCaches: {},
		tempParams: {},
		tempModules: {}
	};
%><!--#include file="config.asp" -->
<%
try{
	pageCustomParams.tempModules.cache = require("cache");
	pageCustomParams.tempModules.dbo = require("DBO");
	pageCustomParams.tempModules.connect = require("openDataBase");
	pageCustomParams.tempModules.fns = require("fn");
	pageCustomParams.tempModules.tags = require("tags");
	pageCustomParams.tempModules.sap = require("sap");
	pageCustomParams.tempCaches.globalCache = require("cache_global");
	
	if ( !pageCustomParams.tempCaches.globalCache.webstatus ){
		ConsoleClose("抱歉，网站暂时被关闭。");
	}
	
	if ( pageCustomParams.tempModules.connect !== true ){
		ConsoleClose("连接数据库失败");
	}
	
	require("status")();
	
	pageCustomParams.page = http.get("page");
	if ( pageCustomParams.page.length === 0 ){ 
		pageCustomParams.page = 1; 
	}else{
		if ( !isNaN( pageCustomParams.page ) ){
			pageCustomParams.page = Number(pageCustomParams.page);
			if ( pageCustomParams.page < 1 ){
				pageCustomParams.page = 1;
			}
		}else{
			ConsoleClose("page params error.");
		}
	};

	pageCustomParams.cateID = http.get("c");
	if ( pageCustomParams.cateID.length === 0 ){
		pageCustomParams.cateID = 0;
	}else{
		if ( !isNaN(pageCustomParams.cateID) ){
			pageCustomParams.cateID = Number(pageCustomParams.cateID);
			if ( pageCustomParams.cateID < 1 ){
				pageCustomParams.cateID = 0;
			}
		}else{
			pageCustomParams.cateID = 0;
		}
	};
	
	pageCustomParams.tempParams.category = require("cache_category");
	
	pageCustomParams.articles = {
		lists: [],
		pages: []
	};

	function getCategoryName( id ){
		var rets = {},
			categoryJSON = pageCustomParams.tempParams.category;
			
		if ( categoryJSON[id + ""] !== undefined ){
			rets.id = id;
			rets.name = categoryJSON[id + ""].name;
			rets.info = categoryJSON[id + ""].info;
			rets.icon = "profile/icons/" + categoryJSON[id + ""].icon;
			rets.url = "default.asp?c=" + id;
		}
		
		return rets;
	}
	
	function getTags( tagStr ){
		var tagsCacheData = pageCustomParams.tempModules.tags,
			tagStrArrays = tagsCacheData.reFormatTags(tagStr),
			keeper = [];
				
		for ( var j = 0 ; j < tagStrArrays.length ; j++ ){
			var rets = tagsCacheData.readTagFromCache( Number(tagStrArrays[j]) );
			if ( rets !== undefined ){
				keeper.push({ 
					id: Number(tagStrArrays[j]), 
					name: rets.name,
					url: "tags.asp?id=" + tagStrArrays[j],
					count: rets.count
				});
			}
		}
		
		return keeper;
	}
	
	var getUserPhoto = pageCustomParams.tempModules.fns.getUserInfo;
	
	(function(dbo){
		var sql = "",
			perpage = pageCustomParams.tempCaches.globalCache.articleperpagecount,
			totalSum = 0,
			_pages = 0,
			_mod = 0,
			totalPages = 0;
			
		if ( pageCustomParams.cateID > 0 ){
			totalSum = Number(String(config.conn.Execute("Select count(id) From blog_article Where log_category=" + pageCustomParams.cateID)(0)));
		}else{
			totalSum = Number(String(config.conn.Execute("Select count(id) From blog_article")(0)));
		}
		
		if ( totalSum === 0 ){
			return;
		}

		if ( totalSum < perpage ){ perpage = totalSum; }
		_mod = totalSum % perpage;
		_pages = Math.floor(totalSum / perpage);
		if ( _mod > 0 ){ totalPages = _pages + 1; }else{ totalPages = _pages; }
		if ( pageCustomParams.page > totalPages ){ pageCustomParams.page = totalPages;}

		if ( pageCustomParams.page > _pages ){
			if ( pageCustomParams.cateID > 0 ){
				sql = "Select top " + _mod + " * From blog_article Where log_category=" + pageCustomParams.cateID + " Order By id ASC, log_istop DESC";
			}else{	
				sql = "Select top " + _mod + " * From blog_article Order By id ASC, log_istop DESC";
			}
			sql = "Select * From (" + sql + ") Order By id DESC";
		}else{
			if ( pageCustomParams.cateID > 0 ){
				sql = "Select top " 
					+ (pageCustomParams.page * perpage) 
					+ " * From blog_article Where log_category=" 
					+ pageCustomParams.cateID 
					+ " Order By id DESC";
			}else{
				sql = "Select top " 
					+ (pageCustomParams.page * perpage) 
					+ " * From blog_article Order By id DESC";
			}
			sql = "Select * From (Select top " + perpage + " * From (" + sql + ") Order By id) Order By id DESC";
		}

		dbo.trave({
			conn: config.conn,
			sql: sql,
			callback: function(){
				this.each(function(){
					pageCustomParams.articles.lists.push({
						id: this("id").value,
						title: this("log_title").value,
						postDate: this("log_posttime").value,
						editDate: this("log_updatetime").value,
						category: getCategoryName(this("log_category").value),
						tags: getTags(this("log_tags").value),
						content: this("log_shortcontent").value,
						url: "article.asp?id=" + this("id").value,
						views: this("log_views").value,
						uid: getUserPhoto(this("log_uid").value),
						istop: this("log_istop").value,
						cover: this("log_cover").value,
						comments: this("log_comments").value
					});
				});
			}
		});
		
		pageCustomParams.articles.lists = pageCustomParams.articles.lists.sort(function(A, B){
			var a = A.istop ? 1 : 0, 
				b = B.istop ? 1 : 0;
			return b - a;
		});
		
		pageCustomParams.tempParams.pages = pageCustomParams.tempModules.fns.pageAnalyze(pageCustomParams.page, totalPages);
		
		if ( 
			( pageCustomParams.articles.lists.length > 0 ) && 
			( (pageCustomParams.tempParams.pages.to - pageCustomParams.tempParams.pages.from) > 0 ) 
		){
			for ( i = pageCustomParams.tempParams.pages.from ; i <= pageCustomParams.tempParams.pages.to ; i++ ){
				var url = "default.asp?c=" + pageCustomParams.cateID + "&page=" + i;
								
				if ( pageCustomParams.tempParams.pages.current === i ){
					pageCustomParams.articles.pages.push({ key: i });
				}else{
					pageCustomParams.articles.pages.push({ key: i, url : url });
				}				
			}
		}
		
	})(pageCustomParams.tempModules.dbo);
	
	delete pageCustomParams.tempCaches;
	delete pageCustomParams.tempModules;
	delete pageCustomParams.tempParams;

	include("profile/themes/" + pageCustomParams.global.theme + "/default.asp");
	CloseConnect();
}catch(e){
	ConsoleClose(e.message);
}
%><!--#include file="config.asp" -->
<%
try{
	pageCustomParams.tempModules.cache = require("cache");
	pageCustomParams.tempModules.dbo = require("DBO");
	pageCustomParams.tempModules.connect = require("openDataBase");
	pageCustomParams.tempModules.fns = require("fn");
	pageCustomParams.tempModules.sap = require("sap");
	pageCustomParams.tempCaches.globalCache = require("cache_global");
	pageCustomParams.tempCaches.fso = require("FSO");
	
	if ( !pageCustomParams.tempCaches.globalCache.webstatus ){
		ConsoleClose("抱歉，网站暂时被关闭。");
	}
	
	if ( pageCustomParams.tempModules.connect !== true ){
		ConsoleClose("连接数据库失败");
	}
	
	require("status")();
	
	pageCustomParams.mark = http.get("mark");
	if ( !pageCustomParams.mark || pageCustomParams.mark.length === 0 ){
		ConsoleClose("参数不正确");
	};
	
	pageCustomParams.page = http.get("page");
	if ( pageCustomParams.page.length === 0 ){ 
		pageCustomParams.page = 1; 
	}else{
		if ( !isNaN( pageCustomParams.page ) ){
			pageCustomParams.page = Number(pageCustomParams.page);
			if ( pageCustomParams.page < 1 ){
				pageCustomParams.page = 1;
			}
		}else{
			ConsoleClose("page params error.");
		}
	};
	
	pageCustomParams.tempParams.category = require("cache_category");
	pageCustomParams.plugin = {};
	pageCustomParams.tempParams.pluginWebPath = "";
	pageCustomParams.tempParams.pluginProxyPath = "";
	
	(function(mark, cache, global, fso){
		var assetsPluginCustom = require("pluginCustom"),
			AllPluginLists = assetsPluginCustom.pluginCache(),
			thisPluginInfo = {};
		
		if ( AllPluginLists[mark] === undefined ){
			ConsoleClose("未找到插件，请确认该插件是否已经被安装。");
			return;
		}else{
			thisPluginInfo = AllPluginLists[mark];
			if ( thisPluginInfo.pluginstatus === true ){
				pageCustomParams.tempParams.pluginWebPath = "profile/themes/" + global.theme + "/" + thisPluginInfo.pluginwebpage,
				pageCustomParams.tempParams.pluginProxyPath = "profile/plugins/" + thisPluginInfo.pluginfolder + "/proxy.asp";	
				pageCustomParams.plugin.configData = assetsPluginCustom.configCache(thisPluginInfo.id);
				pageCustomParams.plugin.folder = "profile/plugins/" + thisPluginInfo.pluginfolder;
				if ( fso.exsit(pageCustomParams.tempParams.pluginProxyPath) ){ 
					pageCustomParams.plugin.webData = require(pageCustomParams.tempParams.pluginProxyPath); 
				}
			}else{
				ConsoleClose("插件已被停用");
			}
		}	
	})(pageCustomParams.mark, pageCustomParams.tempModules.cache, pageCustomParams.tempCaches.globalCache, pageCustomParams.tempCaches.fso);
	
	if ( pageCustomParams.tempCaches.fso.exsit(pageCustomParams.tempParams.pluginWebPath) ){
		include(pageCustomParams.tempParams.pluginWebPath);
	}else{
		ConsoleClose("插件页面文件不存在");
	}
	
	delete pageCustomParams.tempCaches;
	delete pageCustomParams.tempModules;
	delete pageCustomParams.tempParams;
	
	CloseConnect();
}catch(e){
	ConsoleClose(e.message);
}@charset "utf-8";
/* CSS Document */

li.comment-li{ margin-bottom:20px;}

.comment-zone{}
.comment-zone .comment-photo{}
.comment-zone .comment-photo .user-photo{ background:#fff; width:50px; height:50px; padding:5px; overflow:hidden;}
.comment-zone .comment-photo .user-photo img{ width:50px; height:50px; border-radius:3px;}
.comment-zone .comment-context{ margin-left:100px;}
.comment-zone .comment-context .comment-content{}
.comment-zone .comment-context .comment-content .comment-name{ height:22px; line-height:22px;}
.comment-zone .comment-context .comment-content .comment-word{ line-height:18px;}
.comment-zone .comment-context .comment-content .comment-else{ line-height:18px; margin-top:3px;}
.comment-zone .comment-context .comment-content .comment-else a{ margin-right:10px;}

.comment-children{ margin-top:10px;}
.comment-children .comment-children-area{ padding:10px 15px 0px 15px; margin-left:60px;}
.comment-children .comment-children-area li.comment-li{ padding-bottom:10px; margin-bottom:0px;}
.comment-children .comment-children-area li.comment-li .user-photo{ border:1px solid #eee; width:30px; height:30px;}
.comment-children .comment-children-area li.comment-li .user-photo img{ width:30px; height:30px;}
.comment-children .comment-children-area li.comment-li .comment-context{ margin-left:80px;}

.replyBox{ background:#fff; padding:10px 20px; margin-top:5px; width:500px;}
.replyBox .replyArea{}
.replyBox .replyArea .reply-title{ height:30px; line-height:30px;}
.replyBox .replyArea .reply-content textarea{ width:500px; height:80px;}
.replyBox .replyArea .reply-submit{ margin-top:10px;}
.replyBox .replyArea .reply-submit span.reply-info{ margin-left:10px; color:#F30;}
.replyBox .replyArea .reply-submit input{ margin-right:2px;}
.p-checked{ margin-right:10px; margin-top:20px; visibility:hidden;}
.comment-children-area .p-checked{ margin-top:15px;}
.p-show{ visibility:visible;}
.peditlist{ position:absolute; background:#fff; padding:5px 5px;}
.peditlist a{ display:block; height:20px; line-height:20px;}
.peditlist:before{
	content:"";
	position: absolute;
	right: 6px;
	top:-6px;
	width: 0;
	height: 0;
	border-left: 5px solid transparent;
	border-bottom: 6px solid #fff;
	border-right: 5px solid transparent;
}
.peditlist a:link, .peditlist a:visited{ color:#2BA09E;}
.peditlist a:hover{ color:#CF4467;}// JavaScript Document
define(['form', 'overlay'], function(require, exports, module){
	
	var making = false;
	
	function popUpTips( words, callback ){
		$.dialog({
			content: words,
			effect: "deformationZoom",
			callback: callback
		});
	}
	
	function reply(){
		$("body").on("click", ".ac-reply", function(){
			if ( making === true ){
				return;
			}
			making = true;
			var parentli = $(this).parents("li.comment-root:first"),
				id = parentli.attr("data-id"),
				logid = parentli.attr("data-logid");
				
			var html = 	'<form action="' + config.ajaxUrl.server.replyComment + '" method="post" style="margin:0;padding:0;">'
				+			'<input type="hidden" name="id" value="' + id + '" />'
				+			'<input type="hidden" name="logid" value="' + logid + '" />'
				+			'<div class="replyArea">'
				+				'<div class="reply-title">回复该评论</div>'
				+				'<div class="reply-content"><textarea name="content"></textarea></div>'
				+				'<div class="reply-submit"><input type="submit" value="保存" class="button" /> <input type="button" value="取消" class="button close" /> <span class="reply-info"></span></div>'
				+			'</div>'
				+		'</form>';
				
			var replyElement = document.createElement("div");
			$(this).parent().append(replyElement);
			var $replyElement = $(replyElement);
			$replyElement.addClass("replyBox").addClass("ui-wrapshadow").html(html);
			$replyElement.find("textarea").focus();
			var $form = $replyElement.find("form");
			$form.find(".close").on("click", function(){
				$replyElement.slideUp("fast", function(){
					$replyElement.remove();
					making = false;
				});
			});
			$form.ajaxForm({
				dataType: "json",
				beforeSubmit: function(){
					if ( $form.find("textarea").val().length === 0 ){
						popUpTips("请填写回复内容");
						return false;
					}
				},
				success: function( params ){
					if ( params.success ){
						var status = $(".pedit").data("status");
						var _htmls = '<li class="comment-li" data-id="' + params.data.id + '" data-logid="' + logid + '">'
						+				'<div class="comment-zone fn-clear">'
						+					'<span class="p-checked fn-left ' + (status ? "p-show": "") + '"><input type="checkbox" value="' + params.data.id + '" name="ids" /></span>'
						+					'<div class="comment-photo fn-left">'
						+						'<div class="user-photo ui-wrapshadow"><img src="' + params.data.photo + '" /></div>'
						+					'</div>'
						+					'<div class="comment-context">'
						+						'<div class="comment-content">'
						+							'<div class="comment-name">' + params.data.name + ' 于 ' + params.data.date + '发表评论： [ ' + params.data.ip + ' ]</div>'
						+							'<div class="comment-word">' + $form.find("textarea").val() + '</div>'
						+							'<div class="comment-else">'
						+								'<a href="javascript:;" class="ac-reply">回复</a>'
						+								'<a href="javascript:;" class="ac-del">删除</a>'
						+								'<a href="javascript:;" class="ac-noaduit">取消</a>'
						+							'</div>'
						+						'</div>'
						+					'</div>'
						+				'</div>'
						+			'</li>';
						
						var thisul = parentli.find(".comment-children ul");
						
						if ( thisul.size() === 0 ){
							parentli.find(".comment-children").append('<ul class="comment-children-area"></ul>');
						}
						parentli.find(".comment-children ul").prepend(_htmls);
						var thisLi = parentli.find(".comment-children").find("li:first");
						$form.find(".close").trigger("click");
						thisLi.hide();
						thisLi.slideDown("fast", function(){
							parentli.find(".comment-zone:first .comment-context .ac-aduit").removeClass("ac-aduit").addClass("ac-noaduit").text("取消");
						});
					}else{
						popUpTips(params.error);
					}
				}
			})
		});
	}
	
	function destory(){
		$("body").on("click", ".ac-del", function(event, callback){
			if ( making === true ){
				return;
			}
			
			function doDel(){
				making = true;
				
				var parentli = $(this).parents("li:first"),
					id = parentli.attr("data-id"),
					logid = parentli.attr("data-logid"),
					_this = this;
					
				$(this).text("正在删除..");
					
				$.getJSON(config.ajaxUrl.server.delComment, {id: id, logid: logid}, function( params ){
					if ( params.success ){
						parentli.slideUp("fast", function(){
							$(this).remove();
							making = false;
							$.isFunction(callback) && callback();
						});
					}else{
						popUpTips(params.error);
						making = false;
						$(_this).text("删除");
					}
				});
			}
			
			if ( callback ){
				doDel.call(this)
			}else{
				if ( confirm("确定删除这条评论？") ){
					doDel.call(this);
				}
			}
		});
	}
	
	function passAduit(){
		$("body").on("click", ".ac-aduit", function(event, callback){
			if ( making === true ){
				return;
			}
			making = true;
			
			var parentli = $(this).parents("li:first"),
				id = parentli.attr("data-id"),
				logid = parentli.attr("data-logid"),
				_this = this;
				
			$(this).text("正在通过..");
			
			$.getJSON(config.ajaxUrl.server.passComment, {id: id, logid: logid}, function( params ){
				if ( params.success ){
					$(_this).text("通过成功");
					setTimeout(function(){
						$(_this).removeClass("ac-aduit").addClass("ac-noaduit").text("取消");
						making = false;
						$.isFunction(callback) && callback();
					}, 500);
				}else{
					popUpTips(params.error);
					making = false;
					$(_this).text("通过");
				}
			});
		});
	}
	
	function unPassAduit(){
		$("body").on("click", ".ac-noaduit", function(event, callback){
			if ( making === true ){
				return;
			}
			making = true;
			
			var parentli = $(this).parents("li:first"),
				id = parentli.attr("data-id"),
				logid = parentli.attr("data-logid"),
				_this = this;
				
			$(this).text("正在取消..");
			
			$.getJSON(config.ajaxUrl.server.unPassComment, {id: id, logid: logid}, function( params ){
				if ( params.success ){
					$(_this).text("取消成功");
					setTimeout(function(){
						$(_this).removeClass("ac-noaduit").addClass("ac-aduit").text("通过");
						making = false;
						$.isFunction(callback) && callback();
					}, 500);
				}else{
					popUpTips(params.error);
					making = false;
					$(_this).text("取消");
				}
			});
		});
	}
	
	function openCheckbox(){
		$(".pedit").on("click", function(){
			var status = $(this).data("status");
			if ( status ){
				$(".p-checked").removeClass("p-show");
				$(this).data("status", false);
				closePeditList();
			}else{
				$(".p-checked").addClass("p-show");
				$(this).data("status", true);
				openPeditList.call(this);
			}
		});
	}
	
	function openPeditList(){
		var div = document.createElement("div");
		$(div).appendTo("body");
		var $div = $(div);
		
		$div
			.addClass("peditlist")
			.addClass("ui-wrapshadow")
			.html('<a href="javascript:;" id="pdel">批量删除</a><a href="javascript:;" id="paduit">批量通过</a><a href="javascript:;" id="punaduit">批量取消通过</a>');
		
		var offsets = $(this).offset();
		var height = $(this).outerHeight();
		$div.css({
			top: (offsets.top + height + 8) + "px",
			left: (offsets.left + $(this).outerWidth() - $div.outerWidth()) + "px"
		});
	}
	
	function closePeditList(){
		$(".peditlist").slideUp("fast", function(){
			$(this).remove();
		});
	}
	
	function closeStatusBox(word){
		$("#postingbox").html(word);
		var _this = this;
		setTimeout(function(){
			$(_this).find(".close").trigger("click");
		}, 2000);
	}
	
	function pdel(){
		$("body").on("click", "#pdel", function(){
			var status = $(".pedit").data("status");
			if ( status ){
				var ids = [],
					$elements = $(".p-checked").find("input[name='ids']"),
					pocks = [];
					
				$elements.each(function(){
					if ( $(this).attr("checked") ){
						pocks.push(this);
					}
				});

				if ( pocks.length > 0 ){
					$.loading({
						effect: "deformationZoom", 
						word: '正在发送数据..',
						callback: function(){
							var _this = this;
							if ( confirm("确定删除这些评论？") ){
								pedit(pocks, ".ac-del", 0, function(){
									closeStatusBox.call(_this, "删除完毕");
								});
							}
						}
					});
				}
			}
		});
	}
	
	function pAction(elements, types, str){
		$("body").on("click", elements, function(){
			var status = $(".pedit").data("status");
			if ( status ){
				var ids = [],
					$elements = $(".p-checked").find("input[name='ids']"),
					pocks = [];
					
				$elements.each(function(){
					if ( $(this).attr("checked") ){
						pocks.push(this);
					}
				});

				if ( pocks.length > 0 ){
					$.loading({
						effect: "deformationZoom", 
						word: '正在发送数据..',
						callback: function(){
							var _this = this;
							if ( confirm("确定这么做？") ){
								pedit(pocks, types, 0, function(){
									closeStatusBox.call(_this, str);
								});
							}
						}
					});
				}
			}
		});
	}
	
	function pedit(arr, type, i, callback){
		if ( i === undefined ){ i = 0; }
		if ( arr[i] !== undefined ){
			var k = $(arr[i]).parent().next().next().find(type);
			if ( k.size() > 0 ){
				k.trigger("click", function(){
					pedit(arr, type, i + 1, callback);
				});
			}else{
				pedit(arr, type, i + 1, callback);
			}
		}else{
			$.isFunction(callback) && callback();
		}
	}
	
	return {
		init: function(){
			$(function(){
				reply();
				destory();
				passAduit();
				unPassAduit();
				openCheckbox();
				pAction("#pdel", ".ac-del", "全部删除完毕");
				pAction("#paduit", ".ac-aduit", "全部通过完毕");
				pAction("#punaduit", ".ac-noaduit", "全部取消完毕");
			});
		}
	}
});// JavaScript Document
define(['editor', 'form', 'overlay', 'upload'], function(require, exports, module){
	
	var sending = false;
	
	function init_choose_cates(){
		
		if ( $(".choose-current").size() > 0 ){
			$(".ui-position-tools").text($(".choose-current td:eq(" + $(".choose-current").attr("data-eq") + ")").text());
		}
		
		$("body").on("click", ".choose-cate", function(){
			var trParent = $(this).parents("tr:first");
			$(".side-category tr").removeClass("choose-current");
			trParent.addClass("choose-current");
			$("input[name='log_category']").val($(this).attr("data-id"));
			$(".ui-position-tools").text(trParent.find("td").eq(Number(trParent.attr("data-eq"))).text());
		});
	}
	
	function tipPopUp( words, callback ){
		$.dialog({
			content: words,
			effect: "deformationZoom",
			callback: callback
		});
	}
	
	function init_postArticle(){
		function closeStatusBox(word){
			$("#postingbox").html(word);
			var _this = this;
			setTimeout(function(){
				$(_this).find(".close").trigger("click");
			}, 2000);
		}
		
		$("#submit").on("click", function(){
			$.loading({
				effect: "deformationZoom", 
				word: '正在收集数据...',
				callback: function(){
					var content = $("textarea[name='log_content']").val();
						content = init_articleCut(content, articleCut || 300);
						$("#postingbox").html("正在生成预览文本...");
						content = init_autoCompleteHTMLCode(content),
						_this = this;
						
					$("#postingbox").html("正在插入预览文本资源...");
					$("textarea[name='log_shortcontent']").val(content.replace(/\<textarea([\s\S]+?)\<\/textarea\>/ig, "&lt;textarea$1&lt;/textarea&gt;"));
					
					$("form").ajaxSubmit({
						dataType: "json",
						beforeSubmit: function(){
							$("#postingbox").html("正在发送数据到服务器...");
							
							if ( $("input[name='log_title']").val().length === 0 ){
								closeStatusBox.call(_this, "亲，您还没有填写标题呢！");
								return false;
							}
							
							if ( $("input[name='log_category']").val().length === 0 ){
								closeStatusBox.call(_this, "亲，您还没有选择分类呢！");
								return false;
							}
							
							if ( $("textarea[name='log_content']").val().length === 0 ){
								closeStatusBox.call(_this, "亲，您不打算写日志了吗？");
								return false;
							}
						},
						success: function(jsons){
							if ( jsons && jsons.success ){
								closeStatusBox.call(_this, "保存日志成功了。");
								if ( $("form input[name='id']").val().length === 0 ) { 
									$("form").resetForm();
									$(".ui-position-tools").text("");
									$(".choose-current").removeClass("choose-current");
									$("input[name='log_category'], input[name='log_oldCategory']").val('');
									$("#cover-img").attr("src", "_blank");
									$("input[name='log_cover']").val("");
								}
							}else{
								closeStatusBox.call(_this, jsons.error);
							}
						},
						error: function(){
							closeStatusBox.call(_this, "保存日志遇到错误，可能由于你发表的文章内容过长。");
						}
					});
				}
			});
		});
	}
	
	function init_articleCut(text, n){
		var r = 0, 
			v = "",
			b = true,
			t = 0;
			
		for ( var i = 0 ; i < text.length ; i++ ){
			if ( r + 1 < n ){
				var value = text.charAt(i);
					v += value;
					
				switch ( value ){
					case "<":
						b = false;
						t = 1;
						break;
					case ">":
						b = true;
						t = 0;
						break;
					case "&":
						b = false;
						t = 2;
						break;
					case ";":
						if ( t === 2 ){
							b = true;
							r++;
							t = 0;
						}
						break;
					default:
						if ( b === true ){
							r++;
						}
				}
				
			}else{
				break;
			}
		}
		
		return v;
	}
	
	function init_autoCompleteHTMLCode(text, callback){
		var iframe = document.createElement("iframe");
			$(iframe).appendTo("body");
			iframe.contentWindow.document.open(); 
			iframe.contentWindow.document.writeln(text); 
			iframe.contentWindow.document.close();
			text = iframe.contentWindow.document.body.innerHTML;
			$(iframe).remove();
			if ( $.isFunction(callback) ){
				return callback(text);
			}else{
				return text;
			}
	}
	
	function init_editor(){
		$("textarea[name='log_content']").xheditor({
			skin: "nostyle",
			upLinkUrl: 	config.ajaxUrl.server.editorUpload,
			upLinkExt: 	uploadlinktype,
			upImgUrl:  	config.ajaxUrl.server.editorUpload,
			upImgExt:  	uploadimagetype,
			upFlashUrl: config.ajaxUrl.server.editorUpload,
			upFlashExt: uploadswftype,
			upMediaUrl: config.ajaxUrl.server.editorUpload,
			upMediaExt: uploadmediatype
		});
	}
	
	function bindCoverEvent(){
		var ext = uploadimagetype.split(","),
			cons = [];
			
		for ( var i = 0 ; i < ext.length ; i++ ){
			cons.push("*." + ext[i] + ";");
		}
		
		$("#upload").upload({
			auto: true,
			buttonText: "请选择封面图片",
			uploader: config.ajaxUrl.server.editorUpload,
			multi: false,
			fileTypeExts: cons.join(""),
			onUploadSuccess: function(file, data, response){
				var imgURL = $.parseJSON(data).msg.replace(/^\!/, "");
				$("#cover-img").attr("src", imgURL);
				$("input[name='log_cover']").val(imgURL);
			}
		});
	}
	
	return {
		init: function(){
			init_choose_cates();
			init_editor();
			init_postArticle();
			bindCoverEvent();
		}
	}
});// JavaScript Document
define(function(require, exports, module){
	
	var overlay = function( node ){
		this.node = node;
	}
	
	overlay.prototype.deformationZoom = function( callback ){
		var width = $(this).outerWidth(),
			height = $(this).outerHeight(),
			_this = this;
			
		$(this).trigger("overlay.position", function(offset){
			var left = offset.left,
				top = offset.top;
				
			$(this).on("deformationZoom.popup", function(){
				$(this).css({
					width: $(window).width() + "px",
					height: $(window).height() + "px",
					top: "0px",
					left: "0px",
					opacity: 0
				})
				.children().css({
					opacity: 0
				});
				
				$(this).animate({
					width: width + "px",
					height: height + "px",
					left: left + "px",
					top: top + "px",
					opacity: 1
				}, "slow", function(){
					$(this).children().animate({
						opacity: 1
					}, "fast");
					$.isFunction(callback) && callback.call(this);
				});
			})
			
			.on("deformationZoom.drop", function(){
				$(this).empty().animate({
					width: $(window).width() + "px",
					height: $(window).height() + "px",
					top: "0px",
					left: "0px",
					opacity: 0
				}, 100, function(){ 
					$(this).trigger("masker.close");
					$(this).remove();	
				});
			});
			
			$(this).find(".close").on("click", function(){
				$(_this).trigger("deformationZoom.drop");
			});
			
			$(this).trigger("deformationZoom.popup");
		});
	}
	
	$.overlay = function(options){
		options = $.extend({
			mask: true,
			opacity: .5,
			background: "#777",
			content: '',
			effect: 'fadeIn',
			callback: null
		}, options || {});
		
		var $masker;
		
		if ( options.mask === true && $(".fixedMasker").size() === 0 ){
			$masker = $(document.createElement("div"));
			$masker.appendTo("body")
				   .addClass("fixedMasker")
				   .css("background", options.background)
				   .css("opacity", options.opacity);
		}
		
		var $overlayer = $(document.createElement("div"));
			$overlayer.appendTo("body").addClass("fixed").addClass("ui-wrapshadow").html(options.content);
			
		function getTL(){
			var left = ($(window).width() - $overlayer.outerWidth()) / 2;
			var top = ($(window).height() - $overlayer.outerHeight()) / 2;
			return {left:left, top:top};
		}
			
		function resize(){
			var offset = getTL();
			
			$overlayer.css({
				top : offset.top + "px",
				left : offset.left + "px"
			});
		}
			
		$(window).on("resize", resize);
		$overlayer.on("masker.close", function(){
			if ( options.mask === true ){
				$masker.remove();
			}
		}).on("overlay.position", function(event, callback){
			$.isFunction(callback) && callback.call($overlayer, getTL());
		});
		
		resize();

		var ect = new overlay($overlayer);
		
		if ( ect[options.effect] !== undefined ){
			ect[options.effect].call($overlayer, options.callback);
		}else{
			$overlayer.trigger("masker.close");
		}	
	}
	
	$.dialog = function( options ){
		options.content = '<div class="dialog fn-clear" style="width:250px;"><div class="title fn-clear"><div class="fn-left mtitle">提示</div><a href="javascript:;" class="fn-right close">关闭</a></div><div class="content">' + options.content + '</div><div class="bom"><input type="button" value="确定" class="button close" /></div></div>';
		$.overlay(options);
	}
	
	$.dialogSet = function( options ){
		options.content = '<div class="dialog fn-clear" style="width:300px;"><form action="' + options.action + '" method="post" style="margin:0; padding:0;"><div class="title fn-clear"><div class="fn-left mtitle">设置</div><a href="javascript:;" class="fn-right close">关闭</a></div><div class="content">' + options.content + '</div><div class="bom"><input type="submit" value="保存" class="button" /></div></form></div>';
		$.overlay(options);
	}
	
	$.updateBox = function(options){
		options.content = '<div class="ui-updatebox ui-wrapshadow">' + options.content + '</div>';
		$.overlay(options);
	}
	
	$.loading = function(options){
		options.content = '<div class="dialog fn-clear"><div class="close"></div><div id="postingbox" style="width:250px; text-align: center; color: #777;">' + options.word + '</div></div>';
		$.overlay(options);
	}
	
	return overlay;
});<!--#include file="../config.asp" -->
<%
	http.service(function(req, dbo, sap){
		var fns = require("fn"),
			date = require("DATE");
		
		this.reply = function(){
			var id = req.form.id,
				logid = req.form.logid,
				content = fns.HTMLStr(fns.SQLStr(req.form.content)),
				_id = 0,
				_date = new Date(),
				_ip = fns.getIP(),
				rets = {};
				
			dbo.trave({
				conn: config.conn,
				sql: "Select * From blog_global Where id=1",
				callback: function(rs){
					rets.commentid = id;
					rets.commentlogid = logid;
					rets.commentuserid = config.user.id;
					rets.commentcontent = content;
					rets.commentpostdate = date.format(_date, "y/m/d h:i:s");
					rets.commentpostip = _ip;
					rets.commentaudit = true;
					rets.commentusername = rs("authoremail").value;
					rets.commentusermail = rs("website").value;
				}
			});
			
			sap.proxy("system.comment.reply.begin", [rets, req]);
				
			dbo.add({
				conn: config.conn,
				table: "blog_comment",
				data: rets,
				callback: function(){
					_id = this("id").value;
				}
			});
			
			if ( config.user.admin === true && Number(rets.commentid) > 0 ){
				config.conn.Execute("UPDATE blog_comment SET commentaudit=true Where id=" + rets.commentid);
			}
			
			config.conn.Execute("UPDATE blog_article SET log_comments=log_comments+1 Where id=" + logid);
			config.conn.Execute("UPDATE blog_global SET totalcomments=totalcomments+1 Where id=1");

			if ( _id > 0 ){
				var cache = require.async("cache");
					cache.build("global");
					
				return {
					success: true,
					data: {
						id: _id,
						name: config.user.name,
						date: rets.commentpostdate,
						ip: _ip,
						aduit: true,
						photo: config.user.photo,
						logid: logid,
						root: id
					}
				}
			}else{
				return {
					success: false,
					error: "数据存储失败"
				}
			}
		}
		
		this.destory = function(){
			var id = req.query.id,
				logid = req.query.logid,
				count = 0;
			
			try{
				var rooids = [];
				
				dbo.trave({
					conn: config.conn,
					sql: "select * From blog_comment Where commentid=" + id,
					callback: function(rs){
						if ( rs.Bof || rs.Eof ){}else{
							this.each(function(){
								rooids.push(this("id").value);
							});
						}
					}
				});
				
				if ( rooids.length > 0 ){
					for ( var i = 0 ; i < rooids.length ; i++ ){
						config.conn.Execute("Delete From blog_comment Where id=" + rooids[i]);
						count++;
					}
				}

				config.conn.Execute("Delete From blog_comment Where id=" + id);
				count++;
				
				dbo.trave({
					type: 3,
					conn: config.conn,
					sql: "Select * From blog_article Where id=" + logid,
					callback: function( rs ){
						rs("log_comments") = rs("log_comments").value - count;
						rs.Update();
					}
				});
				
				dbo.trave({
					type: 3,
					conn: config.conn,
					sql: "Select * From blog_global Where id=1",
					callback: function( rs ){
						rs("totalcomments") = rs("totalcomments").value - count;
						rs.Update();
					}
				});
				
				var cache = require.async("cache");
					cache.build("global");
					
				return {
					success: true
				}
			}catch(e){
				return {
					success: false,
					error: e.message
				}
			}
		}
		
		this.pass = function(){
			var id = req.query.id,
				logid = req.query.logid;
				
			try{
				dbo.update({
					conn: config.conn,
					table: "blog_comment",
					data: {
						commentaudit: true
					},
					key: "id",
					keyValue: id,
					callback: function(){}
				});
				
				var cache = require("cache");
					cache.build("artcomm", logid);
					
				return {
					success: true
				}
			}catch(e){
				return {
					success: false,
					error: e.message
				}
			}
		}
		
		this.unpass = function(){
			var id = req.query.id,
				logid = req.query.logid;
				
			try{
				dbo.update({
					conn: config.conn,
					table: "blog_comment",
					data: {
						commentaudit: false
					},
					key: "id",
					keyValue: id,
					callback: function(){}
				});
				
				var cache = require("cache");
					cache.build("artcomm", logid);
					
				return {
					success: true
				}
			}catch(e){
				return {
					success: false,
					error: e.message
				}
			}
		}
	});
%><!--#include file="../config.asp" -->
<%
http.service(function( req, dbo, sap ){
	this.normal = function(){
		var title = req.form.title,
			description = req.form.description,
			nickname = req.form.nickname,
			website = req.form.website,
			webstatus = req.form.webstatus,
			articleprivewlength = req.form.articleprivewlength,
			articleperpagecount = req.form.articleperpagecount,
			webdescription = req.form.webdescription,
			webkeywords = req.form.webkeywords,
			authoremail = req.form.authoremail,
			seotitle = req.form.seotitle,
			commentaduit = req.form.commentaduit,
			commentperpagecount = req.form.commentperpagecount,
			gravatarS = req.form.gravatarS,
			gravatarR = req.form.gravatarR,
			gravatarD = req.form.gravatarD,
			uploadimagetype = req.form.uploadimagetype,
			uploadlinktype = req.form.uploadlinktype,
			uploadswftype = req.form.uploadswftype,
			uploadmediatype = req.form.uploadmediatype,
			binarywhitelist = req.form.binarywhitelist,
			canregister = req.form.canregister,
			commentvaildor = req.form.commentvaildor,
			commentdelaytimer = req.form.commentdelaytimer,
			commentmaxlength = req.form.commentmaxlength,
			error = "处理过程中发生错误。";
			
		if ( commentaduit === "1" ){
			commentaduit = true;
		}else{
			commentaduit = false;
		}
		
		if ( commentvaildor === "1" ){
			commentvaildor = true;
		}else{
			commentvaildor = false;
		}
		
		if ( isNaN(commentdelaytimer) ){
			return {
				success: false,
				error: "评论延迟时长必须为数字"
			}
		}
		
		commentdelaytimer = Number(commentdelaytimer);
		
		if ( commentdelaytimer <= 0 ){
			return {
				success: false,
				error: "评论延迟时长必须大于零"
			}
		}
		
		if ( isNaN(commentmaxlength) ){
			return {
				success: false,
				error: "评论字数限制必须为数字"
			}
		}
		
		commentmaxlength = Number(commentmaxlength);
		
		if ( commentmaxlength <= 0 ){
			return {
				success: false,
				error: "评论字数限制必须大于零"
			}
		}
			
		var insSQLData = {
			title: title,
			description: description,
			nickname: nickname,
			website: website,
			webstatus: webstatus,
			articleprivewlength: articleprivewlength,
			articleperpagecount: articleperpagecount,
			webdescription: webdescription,
			webkeywords: webkeywords,
			authoremail: authoremail,
			seotitle: seotitle,
			commentaduit: commentaduit,
			commentperpagecount: commentperpagecount,
			gravatarS: gravatarS,
			gravatarR: gravatarR,
			gravatarD: gravatarD,
			uploadimagetype: uploadimagetype,
			uploadlinktype: uploadlinktype,
			uploadswftype: uploadswftype,
			uploadmediatype: uploadmediatype,
			binarywhitelist: binarywhitelist,
			canregister: canregister,
			commentvaildor: commentvaildor,
			commentdelaytimer: commentdelaytimer,
			commentmaxlength: commentmaxlength
		}
			
		sap.proxy("system.global.save.begin", insSQLData);
		
		dbo.update({
			table: "blog_global", 
			conn: config.conn, 
			key: "id", 
			keyValue: "1",
			data: insSQLData
		});
		
		var cache = require.async("cache");
			cache.build("global");
				
		sap.proxy("system.global.save.end");
		
		return {
			success: true,
			error: error
		}
	}
	
	this.password = function(){
		var oldpass = req.form.oldpass,
			newpass = req.form.newpass,
			repass = req.form.repass,
			checked = false,
			fns = require("fn"),
			SHA1 = require("SHA1");
			
		dbo.trave({
			conn: config.conn,
			sql: "Select * From blog_global Where id=1",
			callback: function(rs){
				if ( SHA1(oldpass + rs("salt").value) === rs("hashkey").value ){
					checked = true;
				}
			}
		});
		
		if ( checked === false ){
			return {
				success: false,
				error: "旧密码验证不正确"
			}
		}
		
		if ( newpass !== repass ){
			return {
				success: false,
				error: "两次密码输入不相同"
			}
		}
		
		var salt = fns.randoms(6);
	
		dbo.update({ data: {
			hashkey: SHA1(newpass + salt),
			salt: salt
		}, table: "blog_global", conn: config.conn, key: "id", keyValue: "1" });
		
		return {
			success: true
		};
	}
});
%><div class="ui-position fn-clear">
  <div class="fn-left ui-position-title">评论管理</div>
  <div class="fn-right ui-position-tools"><a href="javascript:;" class="pedit">批量编辑</a></div>
</div>
<div class="ui-context">
<%
	var dbo = require("DBO"),
		connecte = require("openDataBase"),
		GRA = require("gra"),
		date = require("DATE"),
		page = http.get("page"),
		sap = require("sap");
		
	if ( page.length === 0 ){ page = 1; }else{ page = Number(page); }
	if ( page < 1 ){ page = 1; }
		
	if ( connecte === true ){
		
		function getUserInfo(id){
			var userData = {};
			dbo.trave({
				conn: config.conn,
				sql: "Select * From blog_member Where id=" + id,
				callback: function(rs){
					userData.photo = rs("photo").value;
					userData.nickName = rs("nickName").value;
					userData.oauth = rs("oauth").value;
				}
			});
			return userData
		}
		
		var pageInfo = [];
		dbo.trave({
			conn: config.conn,
			sql: "Select * From blog_comment Where commentid=0 Order By commentpostdate Desc, commentaudit Desc",
			callback: function(rs){
				if ( rs.Bof || rs.Eof ){
					console.log("没有评论数据");
				}else{
%>
	<ul>
<%
					pageInfo = this.serverPage(page, 10, function(){
						var user = this("commentuserid").value,
							userData = {};
						
						if ( user > 0 ){
							userData = getUserInfo(user);
						}else{
							userData.photo = GRA(this("commentusermail").value);
							userData.nickName = this("commentusername").value;
							if ( user === -1 ){
								userData.photo = config.user.photo;
								userData.nickName = config.user.name;
							}
						}
						var _website = this("commentwebsite").value;
						if ( _website && (_website.length > 0) ){}else{
							_website = "javascript:;"
						}
%>
		<li class="comment-li comment-root" data-id="<%=this("id").value%>" data-logid="<%=this("commentlogid").value%>">
        	<div class="comment-zone fn-clear">
            	<span class="p-checked fn-left"><input type="checkbox" value="<%=this("id").value%>" name="ids" /></span>
            	<div class="comment-photo fn-left">
                	<div class="user-photo ui-wrapshadow"><img src="<%=userData.photo%>" /></div>
                </div>
                <div class="comment-context">
                	<div class="comment-content">
                    	<div class="comment-name"><%=userData.nickName%> 于 <%=date.format(this("commentpostdate").value, "y-m-d h:i:s")%>发表评论： [ <a href="<%=_website%>" target="_blank"><%=this("commentpostip").value%></a> ]</div>
                        <div class="comment-word"><%=this("commentcontent").value%></div>
                        <div class="comment-else">
                        	<a href="javascript:;" class="ac-reply">回复</a>
                            <a href="javascript:;" class="ac-del">删除</a>
                            <%
								if ( this("commentaudit").value ){
							%>
                            <a href="javascript:;" class="ac-noaduit">取消</a>
                            <%
								}else{
							%>
                            <a href="javascript:;" class="ac-aduit">通过</a>
                            <%	
								}
							%>
                        </div>
                    </div>
                </div>
            </div>
            <div class="comment-children">
				<%
                    dbo.trave({
                        conn: config.conn,
                        sql: "Select * From blog_comment Where commentid=" + this("id").value + " Order By commentpostdate Desc, commentaudit Desc",
                        callback: function(ts){
                            if ( ts.Bof || ts.Eof ){}else{
                %>
                <ul class="comment-children-area">
                <%
                                this.each(function(){
                                    var _user = this("commentuserid").value,
										_userData = {};
									
									if ( _user > 0 ){
										_userData = getUserInfo(_user);
									}else{
										_userData.photo = GRA(this("commentusermail").value);
										_userData.nickName = this("commentusername").value;
										if ( _user === -1 ){
											_userData.photo = config.user.photo;
											_userData.nickName = config.user.name;
										}
									}
									
									var website = this("commentwebsite").value;
									if ( website && (website.length > 0) ){}else{
										website = "javascript:;"
									}
				%>
                	<li class="comment-li" data-id="<%=this("id").value%>" data-logid="<%=this("commentlogid").value%>">
                    	<div class="comment-zone fn-clear">
                        	<span class="p-checked fn-left"><input type="checkbox" value="<%=this("id").value%>" name="ids" /></span>
                            <div class="comment-photo fn-left">
                                <div class="user-photo ui-wrapshadow"><img src="<%=_userData.photo%>" /></div>
                            </div>
                            <div class="comment-context">
                                <div class="comment-content">
                                    <div class="comment-name"><%=_userData.nickName%> 于 <%=date.format(this("commentpostdate").value, "y-m-d h:i:s")%>发表评论： [ <a href="<%=website%>" target="_blank"><%=this("commentpostip").value%></a> ]</div>
                                    <div class="comment-word"><%=this("commentcontent").value%></div>
                                    <div class="comment-else">
                                    	<a href="javascript:;" class="ac-reply">回复</a>
                                        <a href="javascript:;" class="ac-del">删除</a>
                                        <%
											if ( this("commentaudit").value ){
										%>
										<a href="javascript:;" class="ac-noaduit">取消</a>
										<%
											}else{
										%>
										<a href="javascript:;" class="ac-aduit">通过</a>
										<%	
											}
										%>
                            		</div>
                                </div>
                            </div>
                        </div>
                    </li>
                <%
                                });
                %>
                </ul>
                <%
                            }
                        }
                    })
                %>
            </div>
        </li>
<%
					});
%>
	</ul>
<%
				}
			}
		});
		
		if ( pageInfo.length > 0 ){
			if ( pageInfo[3] > 1 ){
				console.log('<div class="pagebar fn-clear"><span class="fn-left join"></span>');
				var fns = require.async("fn"),
					pages = fns.pageAnalyze(pageInfo[2], pageInfo[3], 9);
					
				fns.pageOut(pages, function(i, isCurrent){
					if ( isCurrent === true ){
						console.log('<span class="fn-left pages">' + i + '</span>');
					}else{
						console.log('<a href="?p=comment&page=' + i + '" class="fn-left pages">' + i + '</a>');
					}
				});
				console.log('</div>');
			}
		}
		
	}else{
		console.log("连接数据库失败");
	}
%>
</div><div class="ui-position fn-clear">
    <div class="fn-left ui-position-title">后台首页</div>
    <div class="fn-right ui-position-tools"></div>
</div>
<div class="ui-context fn-clear">
<%
	var dbo = require("DBO"),
		connecte = require("openDataBase"),
		sap = require("sap"),
		GRA = require("gra");
		
	if ( connecte === true ){
	
	function getUserInfo(id){
		var userData = {};
		dbo.trave({
			conn: config.conn,
			sql: "Select * From blog_member Where id=" + id,
			callback: function(rs){
				userData.photo = rs("photo").value;
				userData.nickName = rs("nickName").value;
				userData.oauth = rs("oauth").value;
			}
		});
		return userData
	}
%>
	<div class="comment fn-right">
    	<ul class="lists">
       	<%
			var aduitCount = Number(String(config.conn.Execute("Select count(id) From blog_comment Where commentaudit<>true")(0))),
				sql = "";
			
			if ( aduitCount > 0 ){
				sql = "Select * From blog_comment Where commentaudit<>true Order By commentpostdate DESC";
			}else{
				sql = "Select top 5 * From blog_comment Order By commentpostdate DESC";
			}
			
			dbo.trave({
				conn: config.conn,
				sql: sql,
				callback: function(){
					this.each(function(){
						var user = this("commentuserid").value,
							userData = {};
						
						if ( user > 0 ){
							userData = getUserInfo(user);
						}else{
							userData.photo = GRA(this("commentusermail").value);
							userData.nickName = this("commentusername").value;
							if ( user === -1 ){
								userData.photo = config.user.photo;
								userData.nickName = config.user.name;
							}
						}
		%>
        	<li class="items fn-clear">
            	<div class="photo fn-right ui-wrapshadow"><img src="<%=userData.photo%>" /></div>
                <div class="infos fn-left ui-wrapshadow">
                	<div class="infocotent">
                        <div class="name"><%=userData.nickName%></div>
                        <div class="word"><%=this("commentcontent").value%></div>
                        <div class="action fn-clear"><a href="javascript:;" class="action-del fn-left" data-id="<%=this("id").value%>" data-logid="<%=this("commentlogid").value%>">删除</a><a href="javascript:;" class="action-reply fn-right" data-logid="<%=this("commentlogid").value%>" data-root="<%=(this("commentid").value === 0 ? this("id").value : this("commentid").value)%>">回复</a></div>
                        <div class="replybox"></div>
                    </div>
                </div>
            </li>
        <%
					});
				}
			});
		%>
        </ul>
    </div>
    <div class="context">
    <div class="fn-left">
<!--    	<div class="nav-titles fn-clear ui-wrapshadow">
            <div class="fn-left">活跃用户</div>
            <div class="fn-right"><a href="?p=member">详细</a></div>
        </div>-->
    	<div class="member">
        	<ul class="fn-clear">
           	<%
				dbo.trave({
					conn: config.conn,
					sql: "Select top 20 * From blog_member Order By logindate DESC",
					callback: function(){
						this.each(function(){
			%>
            	<li class="fn-left">
                	<div class="photo ui-wrapshadow"><img src="<%=this("photo").value%>" /></div>
                    <div class="name fn-textoverhide"><%=this("nickname").value%></div>
                </li>
            <%
						});
					}
				})
			%>
            </ul>
        </div>
        
        <div class="nav-titles fn-clear ui-wrapshadow">
            <div class="fn-left">
            	<div class="tabs fn-clear">
                	<a href="javascript:;" class="fn-left">官方信息</a>
                    <a href="javascript:;" class="fn-left">主题信息</a>
                    <a href="javascript:;" class="fn-left">插件信息</a>
                </div>
            </div>
            <div class="fn-right"><a href="<%=config.platform%>" target="_blank">详细</a></div>
        </div>
        <div class="plant-infos">
        	<div class="plant-infos-item" id="n1"></div>
            <div class="plant-infos-item" id="n2"></div>
            <div class="plant-infos-item" id="n3"></div>
        </div>
        </div>
    </div>
<%
	}else{
		console.log("连接数据库失败");
	}
%>
</div>